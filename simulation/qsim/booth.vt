// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/15/2021 10:07:06"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    booth
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module booth_vlg_sample_tst(
	clk,
	input_mr,
	md,
	mr,
	rst_PC,
	sampler_tx
);
input  clk;
input [5:0] input_mr;
input [5:0] md;
input [5:0] mr;
input  rst_PC;
output sampler_tx;

reg sample;
time current_time;
always @(clk or input_mr or md or mr or rst_PC)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module booth_vlg_check_tst (
	init_reg_saida,
	result,
	saida_adder,
	saidaReg1,
	saidaReg2,
	saidaReg3,
	selec_mux_saida,
	selec_mux_saida1,
	write_reg2_saida,
	write_reg3_saida,
	write_reg_saida,
	sampler_rx
);
input  init_reg_saida;
input [11:0] result;
input [11:0] saida_adder;
input [11:0] saidaReg1;
input [11:0] saidaReg2;
input [11:0] saidaReg3;
input [1:0] selec_mux_saida;
input [11:0] selec_mux_saida1;
input  write_reg2_saida;
input  write_reg3_saida;
input  write_reg_saida;
input sampler_rx;

reg  init_reg_saida_expected;
reg [11:0] result_expected;
reg [11:0] saida_adder_expected;
reg [11:0] saidaReg1_expected;
reg [11:0] saidaReg2_expected;
reg [11:0] saidaReg3_expected;
reg [1:0] selec_mux_saida_expected;
reg [11:0] selec_mux_saida1_expected;
reg  write_reg2_saida_expected;
reg  write_reg3_saida_expected;
reg  write_reg_saida_expected;

reg  init_reg_saida_prev;
reg [11:0] result_prev;
reg [11:0] saida_adder_prev;
reg [11:0] saidaReg1_prev;
reg [11:0] saidaReg2_prev;
reg [11:0] saidaReg3_prev;
reg [1:0] selec_mux_saida_prev;
reg [11:0] selec_mux_saida1_prev;
reg  write_reg2_saida_prev;
reg  write_reg3_saida_prev;
reg  write_reg_saida_prev;

reg  init_reg_saida_expected_prev;
reg [11:0] result_expected_prev;
reg [11:0] saida_adder_expected_prev;
reg [11:0] saidaReg1_expected_prev;
reg [11:0] saidaReg2_expected_prev;
reg [11:0] saidaReg3_expected_prev;
reg [1:0] selec_mux_saida_expected_prev;
reg [11:0] selec_mux_saida1_expected_prev;
reg  write_reg2_saida_expected_prev;
reg  write_reg3_saida_expected_prev;
reg  write_reg_saida_expected_prev;

reg  last_init_reg_saida_exp;
reg [11:0] last_result_exp;
reg [11:0] last_saida_adder_exp;
reg [11:0] last_saidaReg1_exp;
reg [11:0] last_saidaReg2_exp;
reg [11:0] last_saidaReg3_exp;
reg [1:0] last_selec_mux_saida_exp;
reg [11:0] last_selec_mux_saida1_exp;
reg  last_write_reg2_saida_exp;
reg  last_write_reg3_saida_exp;
reg  last_write_reg_saida_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:11] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 11'b1;
end

// update real /o prevs

always @(trigger)
begin
	init_reg_saida_prev = init_reg_saida;
	result_prev = result;
	saida_adder_prev = saida_adder;
	saidaReg1_prev = saidaReg1;
	saidaReg2_prev = saidaReg2;
	saidaReg3_prev = saidaReg3;
	selec_mux_saida_prev = selec_mux_saida;
	selec_mux_saida1_prev = selec_mux_saida1;
	write_reg2_saida_prev = write_reg2_saida;
	write_reg3_saida_prev = write_reg3_saida;
	write_reg_saida_prev = write_reg_saida;
end

// update expected /o prevs

always @(trigger)
begin
	init_reg_saida_expected_prev = init_reg_saida_expected;
	result_expected_prev = result_expected;
	saida_adder_expected_prev = saida_adder_expected;
	saidaReg1_expected_prev = saidaReg1_expected;
	saidaReg2_expected_prev = saidaReg2_expected;
	saidaReg3_expected_prev = saidaReg3_expected;
	selec_mux_saida_expected_prev = selec_mux_saida_expected;
	selec_mux_saida1_expected_prev = selec_mux_saida1_expected;
	write_reg2_saida_expected_prev = write_reg2_saida_expected;
	write_reg3_saida_expected_prev = write_reg3_saida_expected;
	write_reg_saida_expected_prev = write_reg_saida_expected;
end


// expected result[ 11 ]
initial
begin
	result_expected[11] = 1'bX;
end 
// expected result[ 10 ]
initial
begin
	result_expected[10] = 1'bX;
end 
// expected result[ 9 ]
initial
begin
	result_expected[9] = 1'bX;
end 
// expected result[ 8 ]
initial
begin
	result_expected[8] = 1'bX;
end 
// expected result[ 7 ]
initial
begin
	result_expected[7] = 1'bX;
end 
// expected result[ 6 ]
initial
begin
	result_expected[6] = 1'bX;
end 
// expected result[ 5 ]
initial
begin
	result_expected[5] = 1'bX;
end 
// expected result[ 4 ]
initial
begin
	result_expected[4] = 1'bX;
end 
// expected result[ 3 ]
initial
begin
	result_expected[3] = 1'bX;
end 
// expected result[ 2 ]
initial
begin
	result_expected[2] = 1'bX;
end 
// expected result[ 1 ]
initial
begin
	result_expected[1] = 1'bX;
end 
// expected result[ 0 ]
initial
begin
	result_expected[0] = 1'bX;
end 
// expected saidaReg1[ 11 ]
initial
begin
	saidaReg1_expected[11] = 1'bX;
end 
// expected saidaReg1[ 10 ]
initial
begin
	saidaReg1_expected[10] = 1'bX;
end 
// expected saidaReg1[ 9 ]
initial
begin
	saidaReg1_expected[9] = 1'bX;
end 
// expected saidaReg1[ 8 ]
initial
begin
	saidaReg1_expected[8] = 1'bX;
end 
// expected saidaReg1[ 7 ]
initial
begin
	saidaReg1_expected[7] = 1'bX;
end 
// expected saidaReg1[ 6 ]
initial
begin
	saidaReg1_expected[6] = 1'bX;
end 
// expected saidaReg1[ 5 ]
initial
begin
	saidaReg1_expected[5] = 1'bX;
end 
// expected saidaReg1[ 4 ]
initial
begin
	saidaReg1_expected[4] = 1'bX;
end 
// expected saidaReg1[ 3 ]
initial
begin
	saidaReg1_expected[3] = 1'bX;
end 
// expected saidaReg1[ 2 ]
initial
begin
	saidaReg1_expected[2] = 1'bX;
end 
// expected saidaReg1[ 1 ]
initial
begin
	saidaReg1_expected[1] = 1'bX;
end 
// expected saidaReg1[ 0 ]
initial
begin
	saidaReg1_expected[0] = 1'bX;
end 
// expected saidaReg2[ 11 ]
initial
begin
	saidaReg2_expected[11] = 1'bX;
end 
// expected saidaReg2[ 10 ]
initial
begin
	saidaReg2_expected[10] = 1'bX;
end 
// expected saidaReg2[ 9 ]
initial
begin
	saidaReg2_expected[9] = 1'bX;
end 
// expected saidaReg2[ 8 ]
initial
begin
	saidaReg2_expected[8] = 1'bX;
end 
// expected saidaReg2[ 7 ]
initial
begin
	saidaReg2_expected[7] = 1'bX;
end 
// expected saidaReg2[ 6 ]
initial
begin
	saidaReg2_expected[6] = 1'bX;
end 
// expected saidaReg2[ 5 ]
initial
begin
	saidaReg2_expected[5] = 1'bX;
end 
// expected saidaReg2[ 4 ]
initial
begin
	saidaReg2_expected[4] = 1'bX;
end 
// expected saidaReg2[ 3 ]
initial
begin
	saidaReg2_expected[3] = 1'bX;
end 
// expected saidaReg2[ 2 ]
initial
begin
	saidaReg2_expected[2] = 1'bX;
end 
// expected saidaReg2[ 1 ]
initial
begin
	saidaReg2_expected[1] = 1'bX;
end 
// expected saidaReg2[ 0 ]
initial
begin
	saidaReg2_expected[0] = 1'bX;
end 
// expected saidaReg3[ 11 ]
initial
begin
	saidaReg3_expected[11] = 1'bX;
end 
// expected saidaReg3[ 10 ]
initial
begin
	saidaReg3_expected[10] = 1'bX;
end 
// expected saidaReg3[ 9 ]
initial
begin
	saidaReg3_expected[9] = 1'bX;
end 
// expected saidaReg3[ 8 ]
initial
begin
	saidaReg3_expected[8] = 1'bX;
end 
// expected saidaReg3[ 7 ]
initial
begin
	saidaReg3_expected[7] = 1'bX;
end 
// expected saidaReg3[ 6 ]
initial
begin
	saidaReg3_expected[6] = 1'bX;
end 
// expected saidaReg3[ 5 ]
initial
begin
	saidaReg3_expected[5] = 1'bX;
end 
// expected saidaReg3[ 4 ]
initial
begin
	saidaReg3_expected[4] = 1'bX;
end 
// expected saidaReg3[ 3 ]
initial
begin
	saidaReg3_expected[3] = 1'bX;
end 
// expected saidaReg3[ 2 ]
initial
begin
	saidaReg3_expected[2] = 1'bX;
end 
// expected saidaReg3[ 1 ]
initial
begin
	saidaReg3_expected[1] = 1'bX;
end 
// expected saidaReg3[ 0 ]
initial
begin
	saidaReg3_expected[0] = 1'bX;
end 
// expected selec_mux_saida[ 1 ]
initial
begin
	selec_mux_saida_expected[1] = 1'bX;
end 
// expected selec_mux_saida[ 0 ]
initial
begin
	selec_mux_saida_expected[0] = 1'bX;
end 

// expected write_reg_saida
initial
begin
	write_reg_saida_expected = 1'bX;
end 

// expected write_reg2_saida
initial
begin
	write_reg2_saida_expected = 1'bX;
end 

// expected write_reg3_saida
initial
begin
	write_reg3_saida_expected = 1'bX;
end 
// expected selec_mux_saida1[ 11 ]
initial
begin
	selec_mux_saida1_expected[11] = 1'bX;
end 
// expected selec_mux_saida1[ 10 ]
initial
begin
	selec_mux_saida1_expected[10] = 1'bX;
end 
// expected selec_mux_saida1[ 9 ]
initial
begin
	selec_mux_saida1_expected[9] = 1'bX;
end 
// expected selec_mux_saida1[ 8 ]
initial
begin
	selec_mux_saida1_expected[8] = 1'bX;
end 
// expected selec_mux_saida1[ 7 ]
initial
begin
	selec_mux_saida1_expected[7] = 1'bX;
end 
// expected selec_mux_saida1[ 6 ]
initial
begin
	selec_mux_saida1_expected[6] = 1'bX;
end 
// expected selec_mux_saida1[ 5 ]
initial
begin
	selec_mux_saida1_expected[5] = 1'bX;
end 
// expected selec_mux_saida1[ 4 ]
initial
begin
	selec_mux_saida1_expected[4] = 1'bX;
end 
// expected selec_mux_saida1[ 3 ]
initial
begin
	selec_mux_saida1_expected[3] = 1'bX;
end 
// expected selec_mux_saida1[ 2 ]
initial
begin
	selec_mux_saida1_expected[2] = 1'bX;
end 
// expected selec_mux_saida1[ 1 ]
initial
begin
	selec_mux_saida1_expected[1] = 1'bX;
end 
// expected selec_mux_saida1[ 0 ]
initial
begin
	selec_mux_saida1_expected[0] = 1'bX;
end 

// expected init_reg_saida
initial
begin
	init_reg_saida_expected = 1'bX;
end 
// expected saida_adder[ 11 ]
initial
begin
	saida_adder_expected[11] = 1'bX;
end 
// expected saida_adder[ 10 ]
initial
begin
	saida_adder_expected[10] = 1'bX;
end 
// expected saida_adder[ 9 ]
initial
begin
	saida_adder_expected[9] = 1'bX;
end 
// expected saida_adder[ 8 ]
initial
begin
	saida_adder_expected[8] = 1'bX;
end 
// expected saida_adder[ 7 ]
initial
begin
	saida_adder_expected[7] = 1'bX;
end 
// expected saida_adder[ 6 ]
initial
begin
	saida_adder_expected[6] = 1'bX;
end 
// expected saida_adder[ 5 ]
initial
begin
	saida_adder_expected[5] = 1'bX;
end 
// expected saida_adder[ 4 ]
initial
begin
	saida_adder_expected[4] = 1'bX;
end 
// expected saida_adder[ 3 ]
initial
begin
	saida_adder_expected[3] = 1'bX;
end 
// expected saida_adder[ 2 ]
initial
begin
	saida_adder_expected[2] = 1'bX;
end 
// expected saida_adder[ 1 ]
initial
begin
	saida_adder_expected[1] = 1'bX;
end 
// expected saida_adder[ 0 ]
initial
begin
	saida_adder_expected[0] = 1'bX;
end 
// generate trigger
always @(init_reg_saida_expected or init_reg_saida or result_expected or result or saida_adder_expected or saida_adder or saidaReg1_expected or saidaReg1 or saidaReg2_expected or saidaReg2 or saidaReg3_expected or saidaReg3 or selec_mux_saida_expected or selec_mux_saida or selec_mux_saida1_expected or selec_mux_saida1 or write_reg2_saida_expected or write_reg2_saida or write_reg3_saida_expected or write_reg3_saida or write_reg_saida_expected or write_reg_saida)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected init_reg_saida = %b | expected result = %b | expected saida_adder = %b | expected saidaReg1 = %b | expected saidaReg2 = %b | expected saidaReg3 = %b | expected selec_mux_saida = %b | expected selec_mux_saida1 = %b | expected write_reg2_saida = %b | expected write_reg3_saida = %b | expected write_reg_saida = %b | ",init_reg_saida_expected_prev,result_expected_prev,saida_adder_expected_prev,saidaReg1_expected_prev,saidaReg2_expected_prev,saidaReg3_expected_prev,selec_mux_saida_expected_prev,selec_mux_saida1_expected_prev,write_reg2_saida_expected_prev,write_reg3_saida_expected_prev,write_reg_saida_expected_prev);
	$display("| real init_reg_saida = %b | real result = %b | real saida_adder = %b | real saidaReg1 = %b | real saidaReg2 = %b | real saidaReg3 = %b | real selec_mux_saida = %b | real selec_mux_saida1 = %b | real write_reg2_saida = %b | real write_reg3_saida = %b | real write_reg_saida = %b | ",init_reg_saida_prev,result_prev,saida_adder_prev,saidaReg1_prev,saidaReg2_prev,saidaReg3_prev,selec_mux_saida_prev,selec_mux_saida1_prev,write_reg2_saida_prev,write_reg3_saida_prev,write_reg_saida_prev);
`endif
	if (
		( init_reg_saida_expected_prev !== 1'bx ) && ( init_reg_saida_prev !== init_reg_saida_expected_prev )
		&& ((init_reg_saida_expected_prev !== last_init_reg_saida_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port init_reg_saida :: @time = %t",  $realtime);
		$display ("     Expected value = %b", init_reg_saida_expected_prev);
		$display ("     Real value = %b", init_reg_saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_init_reg_saida_exp = init_reg_saida_expected_prev;
	end
	if (
		( result_expected_prev[0] !== 1'bx ) && ( result_prev[0] !== result_expected_prev[0] )
		&& ((result_expected_prev[0] !== last_result_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_result_exp[0] = result_expected_prev[0];
	end
	if (
		( result_expected_prev[1] !== 1'bx ) && ( result_prev[1] !== result_expected_prev[1] )
		&& ((result_expected_prev[1] !== last_result_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_result_exp[1] = result_expected_prev[1];
	end
	if (
		( result_expected_prev[2] !== 1'bx ) && ( result_prev[2] !== result_expected_prev[2] )
		&& ((result_expected_prev[2] !== last_result_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_result_exp[2] = result_expected_prev[2];
	end
	if (
		( result_expected_prev[3] !== 1'bx ) && ( result_prev[3] !== result_expected_prev[3] )
		&& ((result_expected_prev[3] !== last_result_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_result_exp[3] = result_expected_prev[3];
	end
	if (
		( result_expected_prev[4] !== 1'bx ) && ( result_prev[4] !== result_expected_prev[4] )
		&& ((result_expected_prev[4] !== last_result_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_result_exp[4] = result_expected_prev[4];
	end
	if (
		( result_expected_prev[5] !== 1'bx ) && ( result_prev[5] !== result_expected_prev[5] )
		&& ((result_expected_prev[5] !== last_result_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_result_exp[5] = result_expected_prev[5];
	end
	if (
		( result_expected_prev[6] !== 1'bx ) && ( result_prev[6] !== result_expected_prev[6] )
		&& ((result_expected_prev[6] !== last_result_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_result_exp[6] = result_expected_prev[6];
	end
	if (
		( result_expected_prev[7] !== 1'bx ) && ( result_prev[7] !== result_expected_prev[7] )
		&& ((result_expected_prev[7] !== last_result_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_result_exp[7] = result_expected_prev[7];
	end
	if (
		( result_expected_prev[8] !== 1'bx ) && ( result_prev[8] !== result_expected_prev[8] )
		&& ((result_expected_prev[8] !== last_result_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_result_exp[8] = result_expected_prev[8];
	end
	if (
		( result_expected_prev[9] !== 1'bx ) && ( result_prev[9] !== result_expected_prev[9] )
		&& ((result_expected_prev[9] !== last_result_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_result_exp[9] = result_expected_prev[9];
	end
	if (
		( result_expected_prev[10] !== 1'bx ) && ( result_prev[10] !== result_expected_prev[10] )
		&& ((result_expected_prev[10] !== last_result_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_result_exp[10] = result_expected_prev[10];
	end
	if (
		( result_expected_prev[11] !== 1'bx ) && ( result_prev[11] !== result_expected_prev[11] )
		&& ((result_expected_prev[11] !== last_result_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_result_exp[11] = result_expected_prev[11];
	end
	if (
		( saida_adder_expected_prev[0] !== 1'bx ) && ( saida_adder_prev[0] !== saida_adder_expected_prev[0] )
		&& ((saida_adder_expected_prev[0] !== last_saida_adder_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_adder[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_adder_expected_prev);
		$display ("     Real value = %b", saida_adder_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_saida_adder_exp[0] = saida_adder_expected_prev[0];
	end
	if (
		( saida_adder_expected_prev[1] !== 1'bx ) && ( saida_adder_prev[1] !== saida_adder_expected_prev[1] )
		&& ((saida_adder_expected_prev[1] !== last_saida_adder_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_adder[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_adder_expected_prev);
		$display ("     Real value = %b", saida_adder_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_saida_adder_exp[1] = saida_adder_expected_prev[1];
	end
	if (
		( saida_adder_expected_prev[2] !== 1'bx ) && ( saida_adder_prev[2] !== saida_adder_expected_prev[2] )
		&& ((saida_adder_expected_prev[2] !== last_saida_adder_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_adder[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_adder_expected_prev);
		$display ("     Real value = %b", saida_adder_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_saida_adder_exp[2] = saida_adder_expected_prev[2];
	end
	if (
		( saida_adder_expected_prev[3] !== 1'bx ) && ( saida_adder_prev[3] !== saida_adder_expected_prev[3] )
		&& ((saida_adder_expected_prev[3] !== last_saida_adder_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_adder[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_adder_expected_prev);
		$display ("     Real value = %b", saida_adder_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_saida_adder_exp[3] = saida_adder_expected_prev[3];
	end
	if (
		( saida_adder_expected_prev[4] !== 1'bx ) && ( saida_adder_prev[4] !== saida_adder_expected_prev[4] )
		&& ((saida_adder_expected_prev[4] !== last_saida_adder_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_adder[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_adder_expected_prev);
		$display ("     Real value = %b", saida_adder_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_saida_adder_exp[4] = saida_adder_expected_prev[4];
	end
	if (
		( saida_adder_expected_prev[5] !== 1'bx ) && ( saida_adder_prev[5] !== saida_adder_expected_prev[5] )
		&& ((saida_adder_expected_prev[5] !== last_saida_adder_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_adder[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_adder_expected_prev);
		$display ("     Real value = %b", saida_adder_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_saida_adder_exp[5] = saida_adder_expected_prev[5];
	end
	if (
		( saida_adder_expected_prev[6] !== 1'bx ) && ( saida_adder_prev[6] !== saida_adder_expected_prev[6] )
		&& ((saida_adder_expected_prev[6] !== last_saida_adder_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_adder[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_adder_expected_prev);
		$display ("     Real value = %b", saida_adder_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_saida_adder_exp[6] = saida_adder_expected_prev[6];
	end
	if (
		( saida_adder_expected_prev[7] !== 1'bx ) && ( saida_adder_prev[7] !== saida_adder_expected_prev[7] )
		&& ((saida_adder_expected_prev[7] !== last_saida_adder_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_adder[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_adder_expected_prev);
		$display ("     Real value = %b", saida_adder_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_saida_adder_exp[7] = saida_adder_expected_prev[7];
	end
	if (
		( saida_adder_expected_prev[8] !== 1'bx ) && ( saida_adder_prev[8] !== saida_adder_expected_prev[8] )
		&& ((saida_adder_expected_prev[8] !== last_saida_adder_exp[8]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_adder[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_adder_expected_prev);
		$display ("     Real value = %b", saida_adder_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_saida_adder_exp[8] = saida_adder_expected_prev[8];
	end
	if (
		( saida_adder_expected_prev[9] !== 1'bx ) && ( saida_adder_prev[9] !== saida_adder_expected_prev[9] )
		&& ((saida_adder_expected_prev[9] !== last_saida_adder_exp[9]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_adder[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_adder_expected_prev);
		$display ("     Real value = %b", saida_adder_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_saida_adder_exp[9] = saida_adder_expected_prev[9];
	end
	if (
		( saida_adder_expected_prev[10] !== 1'bx ) && ( saida_adder_prev[10] !== saida_adder_expected_prev[10] )
		&& ((saida_adder_expected_prev[10] !== last_saida_adder_exp[10]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_adder[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_adder_expected_prev);
		$display ("     Real value = %b", saida_adder_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_saida_adder_exp[10] = saida_adder_expected_prev[10];
	end
	if (
		( saida_adder_expected_prev[11] !== 1'bx ) && ( saida_adder_prev[11] !== saida_adder_expected_prev[11] )
		&& ((saida_adder_expected_prev[11] !== last_saida_adder_exp[11]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_adder[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_adder_expected_prev);
		$display ("     Real value = %b", saida_adder_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_saida_adder_exp[11] = saida_adder_expected_prev[11];
	end
	if (
		( saidaReg1_expected_prev[0] !== 1'bx ) && ( saidaReg1_prev[0] !== saidaReg1_expected_prev[0] )
		&& ((saidaReg1_expected_prev[0] !== last_saidaReg1_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaReg1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaReg1_expected_prev);
		$display ("     Real value = %b", saidaReg1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_saidaReg1_exp[0] = saidaReg1_expected_prev[0];
	end
	if (
		( saidaReg1_expected_prev[1] !== 1'bx ) && ( saidaReg1_prev[1] !== saidaReg1_expected_prev[1] )
		&& ((saidaReg1_expected_prev[1] !== last_saidaReg1_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaReg1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaReg1_expected_prev);
		$display ("     Real value = %b", saidaReg1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_saidaReg1_exp[1] = saidaReg1_expected_prev[1];
	end
	if (
		( saidaReg1_expected_prev[2] !== 1'bx ) && ( saidaReg1_prev[2] !== saidaReg1_expected_prev[2] )
		&& ((saidaReg1_expected_prev[2] !== last_saidaReg1_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaReg1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaReg1_expected_prev);
		$display ("     Real value = %b", saidaReg1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_saidaReg1_exp[2] = saidaReg1_expected_prev[2];
	end
	if (
		( saidaReg1_expected_prev[3] !== 1'bx ) && ( saidaReg1_prev[3] !== saidaReg1_expected_prev[3] )
		&& ((saidaReg1_expected_prev[3] !== last_saidaReg1_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaReg1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaReg1_expected_prev);
		$display ("     Real value = %b", saidaReg1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_saidaReg1_exp[3] = saidaReg1_expected_prev[3];
	end
	if (
		( saidaReg1_expected_prev[4] !== 1'bx ) && ( saidaReg1_prev[4] !== saidaReg1_expected_prev[4] )
		&& ((saidaReg1_expected_prev[4] !== last_saidaReg1_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaReg1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaReg1_expected_prev);
		$display ("     Real value = %b", saidaReg1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_saidaReg1_exp[4] = saidaReg1_expected_prev[4];
	end
	if (
		( saidaReg1_expected_prev[5] !== 1'bx ) && ( saidaReg1_prev[5] !== saidaReg1_expected_prev[5] )
		&& ((saidaReg1_expected_prev[5] !== last_saidaReg1_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaReg1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaReg1_expected_prev);
		$display ("     Real value = %b", saidaReg1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_saidaReg1_exp[5] = saidaReg1_expected_prev[5];
	end
	if (
		( saidaReg1_expected_prev[6] !== 1'bx ) && ( saidaReg1_prev[6] !== saidaReg1_expected_prev[6] )
		&& ((saidaReg1_expected_prev[6] !== last_saidaReg1_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaReg1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaReg1_expected_prev);
		$display ("     Real value = %b", saidaReg1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_saidaReg1_exp[6] = saidaReg1_expected_prev[6];
	end
	if (
		( saidaReg1_expected_prev[7] !== 1'bx ) && ( saidaReg1_prev[7] !== saidaReg1_expected_prev[7] )
		&& ((saidaReg1_expected_prev[7] !== last_saidaReg1_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaReg1[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaReg1_expected_prev);
		$display ("     Real value = %b", saidaReg1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_saidaReg1_exp[7] = saidaReg1_expected_prev[7];
	end
	if (
		( saidaReg1_expected_prev[8] !== 1'bx ) && ( saidaReg1_prev[8] !== saidaReg1_expected_prev[8] )
		&& ((saidaReg1_expected_prev[8] !== last_saidaReg1_exp[8]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaReg1[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaReg1_expected_prev);
		$display ("     Real value = %b", saidaReg1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_saidaReg1_exp[8] = saidaReg1_expected_prev[8];
	end
	if (
		( saidaReg1_expected_prev[9] !== 1'bx ) && ( saidaReg1_prev[9] !== saidaReg1_expected_prev[9] )
		&& ((saidaReg1_expected_prev[9] !== last_saidaReg1_exp[9]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaReg1[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaReg1_expected_prev);
		$display ("     Real value = %b", saidaReg1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_saidaReg1_exp[9] = saidaReg1_expected_prev[9];
	end
	if (
		( saidaReg1_expected_prev[10] !== 1'bx ) && ( saidaReg1_prev[10] !== saidaReg1_expected_prev[10] )
		&& ((saidaReg1_expected_prev[10] !== last_saidaReg1_exp[10]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaReg1[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaReg1_expected_prev);
		$display ("     Real value = %b", saidaReg1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_saidaReg1_exp[10] = saidaReg1_expected_prev[10];
	end
	if (
		( saidaReg1_expected_prev[11] !== 1'bx ) && ( saidaReg1_prev[11] !== saidaReg1_expected_prev[11] )
		&& ((saidaReg1_expected_prev[11] !== last_saidaReg1_exp[11]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaReg1[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaReg1_expected_prev);
		$display ("     Real value = %b", saidaReg1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_saidaReg1_exp[11] = saidaReg1_expected_prev[11];
	end
	if (
		( saidaReg2_expected_prev[0] !== 1'bx ) && ( saidaReg2_prev[0] !== saidaReg2_expected_prev[0] )
		&& ((saidaReg2_expected_prev[0] !== last_saidaReg2_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaReg2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaReg2_expected_prev);
		$display ("     Real value = %b", saidaReg2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_saidaReg2_exp[0] = saidaReg2_expected_prev[0];
	end
	if (
		( saidaReg2_expected_prev[1] !== 1'bx ) && ( saidaReg2_prev[1] !== saidaReg2_expected_prev[1] )
		&& ((saidaReg2_expected_prev[1] !== last_saidaReg2_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaReg2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaReg2_expected_prev);
		$display ("     Real value = %b", saidaReg2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_saidaReg2_exp[1] = saidaReg2_expected_prev[1];
	end
	if (
		( saidaReg2_expected_prev[2] !== 1'bx ) && ( saidaReg2_prev[2] !== saidaReg2_expected_prev[2] )
		&& ((saidaReg2_expected_prev[2] !== last_saidaReg2_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaReg2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaReg2_expected_prev);
		$display ("     Real value = %b", saidaReg2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_saidaReg2_exp[2] = saidaReg2_expected_prev[2];
	end
	if (
		( saidaReg2_expected_prev[3] !== 1'bx ) && ( saidaReg2_prev[3] !== saidaReg2_expected_prev[3] )
		&& ((saidaReg2_expected_prev[3] !== last_saidaReg2_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaReg2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaReg2_expected_prev);
		$display ("     Real value = %b", saidaReg2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_saidaReg2_exp[3] = saidaReg2_expected_prev[3];
	end
	if (
		( saidaReg2_expected_prev[4] !== 1'bx ) && ( saidaReg2_prev[4] !== saidaReg2_expected_prev[4] )
		&& ((saidaReg2_expected_prev[4] !== last_saidaReg2_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaReg2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaReg2_expected_prev);
		$display ("     Real value = %b", saidaReg2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_saidaReg2_exp[4] = saidaReg2_expected_prev[4];
	end
	if (
		( saidaReg2_expected_prev[5] !== 1'bx ) && ( saidaReg2_prev[5] !== saidaReg2_expected_prev[5] )
		&& ((saidaReg2_expected_prev[5] !== last_saidaReg2_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaReg2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaReg2_expected_prev);
		$display ("     Real value = %b", saidaReg2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_saidaReg2_exp[5] = saidaReg2_expected_prev[5];
	end
	if (
		( saidaReg2_expected_prev[6] !== 1'bx ) && ( saidaReg2_prev[6] !== saidaReg2_expected_prev[6] )
		&& ((saidaReg2_expected_prev[6] !== last_saidaReg2_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaReg2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaReg2_expected_prev);
		$display ("     Real value = %b", saidaReg2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_saidaReg2_exp[6] = saidaReg2_expected_prev[6];
	end
	if (
		( saidaReg2_expected_prev[7] !== 1'bx ) && ( saidaReg2_prev[7] !== saidaReg2_expected_prev[7] )
		&& ((saidaReg2_expected_prev[7] !== last_saidaReg2_exp[7]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaReg2[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaReg2_expected_prev);
		$display ("     Real value = %b", saidaReg2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_saidaReg2_exp[7] = saidaReg2_expected_prev[7];
	end
	if (
		( saidaReg2_expected_prev[8] !== 1'bx ) && ( saidaReg2_prev[8] !== saidaReg2_expected_prev[8] )
		&& ((saidaReg2_expected_prev[8] !== last_saidaReg2_exp[8]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaReg2[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaReg2_expected_prev);
		$display ("     Real value = %b", saidaReg2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_saidaReg2_exp[8] = saidaReg2_expected_prev[8];
	end
	if (
		( saidaReg2_expected_prev[9] !== 1'bx ) && ( saidaReg2_prev[9] !== saidaReg2_expected_prev[9] )
		&& ((saidaReg2_expected_prev[9] !== last_saidaReg2_exp[9]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaReg2[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaReg2_expected_prev);
		$display ("     Real value = %b", saidaReg2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_saidaReg2_exp[9] = saidaReg2_expected_prev[9];
	end
	if (
		( saidaReg2_expected_prev[10] !== 1'bx ) && ( saidaReg2_prev[10] !== saidaReg2_expected_prev[10] )
		&& ((saidaReg2_expected_prev[10] !== last_saidaReg2_exp[10]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaReg2[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaReg2_expected_prev);
		$display ("     Real value = %b", saidaReg2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_saidaReg2_exp[10] = saidaReg2_expected_prev[10];
	end
	if (
		( saidaReg2_expected_prev[11] !== 1'bx ) && ( saidaReg2_prev[11] !== saidaReg2_expected_prev[11] )
		&& ((saidaReg2_expected_prev[11] !== last_saidaReg2_exp[11]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaReg2[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaReg2_expected_prev);
		$display ("     Real value = %b", saidaReg2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_saidaReg2_exp[11] = saidaReg2_expected_prev[11];
	end
	if (
		( saidaReg3_expected_prev[0] !== 1'bx ) && ( saidaReg3_prev[0] !== saidaReg3_expected_prev[0] )
		&& ((saidaReg3_expected_prev[0] !== last_saidaReg3_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaReg3[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaReg3_expected_prev);
		$display ("     Real value = %b", saidaReg3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_saidaReg3_exp[0] = saidaReg3_expected_prev[0];
	end
	if (
		( saidaReg3_expected_prev[1] !== 1'bx ) && ( saidaReg3_prev[1] !== saidaReg3_expected_prev[1] )
		&& ((saidaReg3_expected_prev[1] !== last_saidaReg3_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaReg3[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaReg3_expected_prev);
		$display ("     Real value = %b", saidaReg3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_saidaReg3_exp[1] = saidaReg3_expected_prev[1];
	end
	if (
		( saidaReg3_expected_prev[2] !== 1'bx ) && ( saidaReg3_prev[2] !== saidaReg3_expected_prev[2] )
		&& ((saidaReg3_expected_prev[2] !== last_saidaReg3_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaReg3[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaReg3_expected_prev);
		$display ("     Real value = %b", saidaReg3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_saidaReg3_exp[2] = saidaReg3_expected_prev[2];
	end
	if (
		( saidaReg3_expected_prev[3] !== 1'bx ) && ( saidaReg3_prev[3] !== saidaReg3_expected_prev[3] )
		&& ((saidaReg3_expected_prev[3] !== last_saidaReg3_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaReg3[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaReg3_expected_prev);
		$display ("     Real value = %b", saidaReg3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_saidaReg3_exp[3] = saidaReg3_expected_prev[3];
	end
	if (
		( saidaReg3_expected_prev[4] !== 1'bx ) && ( saidaReg3_prev[4] !== saidaReg3_expected_prev[4] )
		&& ((saidaReg3_expected_prev[4] !== last_saidaReg3_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaReg3[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaReg3_expected_prev);
		$display ("     Real value = %b", saidaReg3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_saidaReg3_exp[4] = saidaReg3_expected_prev[4];
	end
	if (
		( saidaReg3_expected_prev[5] !== 1'bx ) && ( saidaReg3_prev[5] !== saidaReg3_expected_prev[5] )
		&& ((saidaReg3_expected_prev[5] !== last_saidaReg3_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaReg3[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaReg3_expected_prev);
		$display ("     Real value = %b", saidaReg3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_saidaReg3_exp[5] = saidaReg3_expected_prev[5];
	end
	if (
		( saidaReg3_expected_prev[6] !== 1'bx ) && ( saidaReg3_prev[6] !== saidaReg3_expected_prev[6] )
		&& ((saidaReg3_expected_prev[6] !== last_saidaReg3_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaReg3[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaReg3_expected_prev);
		$display ("     Real value = %b", saidaReg3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_saidaReg3_exp[6] = saidaReg3_expected_prev[6];
	end
	if (
		( saidaReg3_expected_prev[7] !== 1'bx ) && ( saidaReg3_prev[7] !== saidaReg3_expected_prev[7] )
		&& ((saidaReg3_expected_prev[7] !== last_saidaReg3_exp[7]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaReg3[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaReg3_expected_prev);
		$display ("     Real value = %b", saidaReg3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_saidaReg3_exp[7] = saidaReg3_expected_prev[7];
	end
	if (
		( saidaReg3_expected_prev[8] !== 1'bx ) && ( saidaReg3_prev[8] !== saidaReg3_expected_prev[8] )
		&& ((saidaReg3_expected_prev[8] !== last_saidaReg3_exp[8]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaReg3[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaReg3_expected_prev);
		$display ("     Real value = %b", saidaReg3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_saidaReg3_exp[8] = saidaReg3_expected_prev[8];
	end
	if (
		( saidaReg3_expected_prev[9] !== 1'bx ) && ( saidaReg3_prev[9] !== saidaReg3_expected_prev[9] )
		&& ((saidaReg3_expected_prev[9] !== last_saidaReg3_exp[9]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaReg3[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaReg3_expected_prev);
		$display ("     Real value = %b", saidaReg3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_saidaReg3_exp[9] = saidaReg3_expected_prev[9];
	end
	if (
		( saidaReg3_expected_prev[10] !== 1'bx ) && ( saidaReg3_prev[10] !== saidaReg3_expected_prev[10] )
		&& ((saidaReg3_expected_prev[10] !== last_saidaReg3_exp[10]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaReg3[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaReg3_expected_prev);
		$display ("     Real value = %b", saidaReg3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_saidaReg3_exp[10] = saidaReg3_expected_prev[10];
	end
	if (
		( saidaReg3_expected_prev[11] !== 1'bx ) && ( saidaReg3_prev[11] !== saidaReg3_expected_prev[11] )
		&& ((saidaReg3_expected_prev[11] !== last_saidaReg3_exp[11]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaReg3[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaReg3_expected_prev);
		$display ("     Real value = %b", saidaReg3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_saidaReg3_exp[11] = saidaReg3_expected_prev[11];
	end
	if (
		( selec_mux_saida_expected_prev[0] !== 1'bx ) && ( selec_mux_saida_prev[0] !== selec_mux_saida_expected_prev[0] )
		&& ((selec_mux_saida_expected_prev[0] !== last_selec_mux_saida_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port selec_mux_saida[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", selec_mux_saida_expected_prev);
		$display ("     Real value = %b", selec_mux_saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_selec_mux_saida_exp[0] = selec_mux_saida_expected_prev[0];
	end
	if (
		( selec_mux_saida_expected_prev[1] !== 1'bx ) && ( selec_mux_saida_prev[1] !== selec_mux_saida_expected_prev[1] )
		&& ((selec_mux_saida_expected_prev[1] !== last_selec_mux_saida_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port selec_mux_saida[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", selec_mux_saida_expected_prev);
		$display ("     Real value = %b", selec_mux_saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_selec_mux_saida_exp[1] = selec_mux_saida_expected_prev[1];
	end
	if (
		( selec_mux_saida1_expected_prev[0] !== 1'bx ) && ( selec_mux_saida1_prev[0] !== selec_mux_saida1_expected_prev[0] )
		&& ((selec_mux_saida1_expected_prev[0] !== last_selec_mux_saida1_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port selec_mux_saida1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", selec_mux_saida1_expected_prev);
		$display ("     Real value = %b", selec_mux_saida1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_selec_mux_saida1_exp[0] = selec_mux_saida1_expected_prev[0];
	end
	if (
		( selec_mux_saida1_expected_prev[1] !== 1'bx ) && ( selec_mux_saida1_prev[1] !== selec_mux_saida1_expected_prev[1] )
		&& ((selec_mux_saida1_expected_prev[1] !== last_selec_mux_saida1_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port selec_mux_saida1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", selec_mux_saida1_expected_prev);
		$display ("     Real value = %b", selec_mux_saida1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_selec_mux_saida1_exp[1] = selec_mux_saida1_expected_prev[1];
	end
	if (
		( selec_mux_saida1_expected_prev[2] !== 1'bx ) && ( selec_mux_saida1_prev[2] !== selec_mux_saida1_expected_prev[2] )
		&& ((selec_mux_saida1_expected_prev[2] !== last_selec_mux_saida1_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port selec_mux_saida1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", selec_mux_saida1_expected_prev);
		$display ("     Real value = %b", selec_mux_saida1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_selec_mux_saida1_exp[2] = selec_mux_saida1_expected_prev[2];
	end
	if (
		( selec_mux_saida1_expected_prev[3] !== 1'bx ) && ( selec_mux_saida1_prev[3] !== selec_mux_saida1_expected_prev[3] )
		&& ((selec_mux_saida1_expected_prev[3] !== last_selec_mux_saida1_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port selec_mux_saida1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", selec_mux_saida1_expected_prev);
		$display ("     Real value = %b", selec_mux_saida1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_selec_mux_saida1_exp[3] = selec_mux_saida1_expected_prev[3];
	end
	if (
		( selec_mux_saida1_expected_prev[4] !== 1'bx ) && ( selec_mux_saida1_prev[4] !== selec_mux_saida1_expected_prev[4] )
		&& ((selec_mux_saida1_expected_prev[4] !== last_selec_mux_saida1_exp[4]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port selec_mux_saida1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", selec_mux_saida1_expected_prev);
		$display ("     Real value = %b", selec_mux_saida1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_selec_mux_saida1_exp[4] = selec_mux_saida1_expected_prev[4];
	end
	if (
		( selec_mux_saida1_expected_prev[5] !== 1'bx ) && ( selec_mux_saida1_prev[5] !== selec_mux_saida1_expected_prev[5] )
		&& ((selec_mux_saida1_expected_prev[5] !== last_selec_mux_saida1_exp[5]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port selec_mux_saida1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", selec_mux_saida1_expected_prev);
		$display ("     Real value = %b", selec_mux_saida1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_selec_mux_saida1_exp[5] = selec_mux_saida1_expected_prev[5];
	end
	if (
		( selec_mux_saida1_expected_prev[6] !== 1'bx ) && ( selec_mux_saida1_prev[6] !== selec_mux_saida1_expected_prev[6] )
		&& ((selec_mux_saida1_expected_prev[6] !== last_selec_mux_saida1_exp[6]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port selec_mux_saida1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", selec_mux_saida1_expected_prev);
		$display ("     Real value = %b", selec_mux_saida1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_selec_mux_saida1_exp[6] = selec_mux_saida1_expected_prev[6];
	end
	if (
		( selec_mux_saida1_expected_prev[7] !== 1'bx ) && ( selec_mux_saida1_prev[7] !== selec_mux_saida1_expected_prev[7] )
		&& ((selec_mux_saida1_expected_prev[7] !== last_selec_mux_saida1_exp[7]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port selec_mux_saida1[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", selec_mux_saida1_expected_prev);
		$display ("     Real value = %b", selec_mux_saida1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_selec_mux_saida1_exp[7] = selec_mux_saida1_expected_prev[7];
	end
	if (
		( selec_mux_saida1_expected_prev[8] !== 1'bx ) && ( selec_mux_saida1_prev[8] !== selec_mux_saida1_expected_prev[8] )
		&& ((selec_mux_saida1_expected_prev[8] !== last_selec_mux_saida1_exp[8]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port selec_mux_saida1[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", selec_mux_saida1_expected_prev);
		$display ("     Real value = %b", selec_mux_saida1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_selec_mux_saida1_exp[8] = selec_mux_saida1_expected_prev[8];
	end
	if (
		( selec_mux_saida1_expected_prev[9] !== 1'bx ) && ( selec_mux_saida1_prev[9] !== selec_mux_saida1_expected_prev[9] )
		&& ((selec_mux_saida1_expected_prev[9] !== last_selec_mux_saida1_exp[9]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port selec_mux_saida1[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", selec_mux_saida1_expected_prev);
		$display ("     Real value = %b", selec_mux_saida1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_selec_mux_saida1_exp[9] = selec_mux_saida1_expected_prev[9];
	end
	if (
		( selec_mux_saida1_expected_prev[10] !== 1'bx ) && ( selec_mux_saida1_prev[10] !== selec_mux_saida1_expected_prev[10] )
		&& ((selec_mux_saida1_expected_prev[10] !== last_selec_mux_saida1_exp[10]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port selec_mux_saida1[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", selec_mux_saida1_expected_prev);
		$display ("     Real value = %b", selec_mux_saida1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_selec_mux_saida1_exp[10] = selec_mux_saida1_expected_prev[10];
	end
	if (
		( selec_mux_saida1_expected_prev[11] !== 1'bx ) && ( selec_mux_saida1_prev[11] !== selec_mux_saida1_expected_prev[11] )
		&& ((selec_mux_saida1_expected_prev[11] !== last_selec_mux_saida1_exp[11]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port selec_mux_saida1[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", selec_mux_saida1_expected_prev);
		$display ("     Real value = %b", selec_mux_saida1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_selec_mux_saida1_exp[11] = selec_mux_saida1_expected_prev[11];
	end
	if (
		( write_reg2_saida_expected_prev !== 1'bx ) && ( write_reg2_saida_prev !== write_reg2_saida_expected_prev )
		&& ((write_reg2_saida_expected_prev !== last_write_reg2_saida_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_reg2_saida :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_reg2_saida_expected_prev);
		$display ("     Real value = %b", write_reg2_saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_write_reg2_saida_exp = write_reg2_saida_expected_prev;
	end
	if (
		( write_reg3_saida_expected_prev !== 1'bx ) && ( write_reg3_saida_prev !== write_reg3_saida_expected_prev )
		&& ((write_reg3_saida_expected_prev !== last_write_reg3_saida_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_reg3_saida :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_reg3_saida_expected_prev);
		$display ("     Real value = %b", write_reg3_saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_write_reg3_saida_exp = write_reg3_saida_expected_prev;
	end
	if (
		( write_reg_saida_expected_prev !== 1'bx ) && ( write_reg_saida_prev !== write_reg_saida_expected_prev )
		&& ((write_reg_saida_expected_prev !== last_write_reg_saida_exp) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_reg_saida :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_reg_saida_expected_prev);
		$display ("     Real value = %b", write_reg_saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_write_reg_saida_exp = write_reg_saida_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module booth_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [5:0] input_mr;
reg [5:0] md;
reg [5:0] mr;
reg rst_PC;
// wires                                               
wire init_reg_saida;
wire [11:0] result;
wire [11:0] saida_adder;
wire [11:0] saidaReg1;
wire [11:0] saidaReg2;
wire [11:0] saidaReg3;
wire [1:0] selec_mux_saida;
wire [11:0] selec_mux_saida1;
wire write_reg2_saida;
wire write_reg3_saida;
wire write_reg_saida;

wire sampler;                             

// assign statements (if any)                          
booth i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.init_reg_saida(init_reg_saida),
	.input_mr(input_mr),
	.md(md),
	.mr(mr),
	.result(result),
	.rst_PC(rst_PC),
	.saida_adder(saida_adder),
	.saidaReg1(saidaReg1),
	.saidaReg2(saidaReg2),
	.saidaReg3(saidaReg3),
	.selec_mux_saida(selec_mux_saida),
	.selec_mux_saida1(selec_mux_saida1),
	.write_reg2_saida(write_reg2_saida),
	.write_reg3_saida(write_reg3_saida),
	.write_reg_saida(write_reg_saida)
);
// md[ 5 ]
initial
begin
	md[5] = 1'b0;
end 
// md[ 4 ]
initial
begin
	md[4] = 1'b1;
end 
// md[ 3 ]
initial
begin
	md[3] = 1'b0;
end 
// md[ 2 ]
initial
begin
	md[2] = 1'b1;
end 
// md[ 1 ]
initial
begin
	md[1] = 1'b0;
end 
// md[ 0 ]
initial
begin
	md[0] = 1'b1;
end 
// mr[ 5 ]
initial
begin
	mr[5] = 1'b0;
end 
// mr[ 4 ]
initial
begin
	mr[4] = 1'b1;
end 
// mr[ 3 ]
initial
begin
	mr[3] = 1'b1;
end 
// mr[ 2 ]
initial
begin
	mr[2] = 1'b1;
end 
// mr[ 1 ]
initial
begin
	mr[1] = 1'b1;
end 
// mr[ 0 ]
initial
begin
	mr[0] = 1'b0;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #50000 1'b1;
	#50000;
end 

// rst_PC
initial
begin
	rst_PC = 1'b1;
	rst_PC = #70000 1'b0;
end 

booth_vlg_sample_tst tb_sample (
	.clk(clk),
	.input_mr(input_mr),
	.md(md),
	.mr(mr),
	.rst_PC(rst_PC),
	.sampler_tx(sampler)
);

booth_vlg_check_tst tb_out(
	.init_reg_saida(init_reg_saida),
	.result(result),
	.saida_adder(saida_adder),
	.saidaReg1(saidaReg1),
	.saidaReg2(saidaReg2),
	.saidaReg3(saidaReg3),
	.selec_mux_saida(selec_mux_saida),
	.selec_mux_saida1(selec_mux_saida1),
	.write_reg2_saida(write_reg2_saida),
	.write_reg3_saida(write_reg3_saida),
	.write_reg_saida(write_reg_saida),
	.sampler_rx(sampler)
);
endmodule

